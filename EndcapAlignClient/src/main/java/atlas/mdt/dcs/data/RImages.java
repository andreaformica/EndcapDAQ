package atlas.mdt.dcs.data;

// Generated Aug 31, 2012 4:54:30 PM by Hibernate Tools 3.4.0.CR1

import io.utils.MyPrinterHandler;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;

/**
 * RImages generated by hbm2java
 */
@Entity
@Table(name = "R_IMAGES", schema = "ATLAS_MDT_DCS")
@NamedQueries({
		@NamedQuery(name = RImages.QUERY_GET_IMAGES_BYNAME, query = " FROM RImages as mt"
				+ " WHERE (mt.imageName like :imgname) "),
				@NamedQuery(name = RImages.QUERY_GET_IMAGES_BYCRDR, query = " FROM RImages as mt"
						+ " WHERE (mt.imageName like :imgname) and (mt.cameraCrate like :camcrate) "
						+ " and ((mt.cameraDriver = :camdriver) or :camdriver < 0) "
						+ " and ((mt.cameraMux = :cammux) or :cammux < 0)"),
		@NamedQuery(name = RImages.QUERY_GET_IMAGES_BYID, query = " FROM RImages as mt"
				+ " WHERE (mt.imageId = :imgid) ") })
public class RImages implements java.io.Serializable, EcConfImage {

	public static final String QUERY_GET_IMAGES_BYNAME = "rimages.getimagesbyname";
	public static final String QUERY_GET_IMAGES_BYID = "rimages.getimagesbyid";
	public static final String QUERY_GET_IMAGES_BYCRDR = "rimages.getimagesbycrdr";

	private Long imageId;
	private String imageName;
	private String cameraCrate;
	private Long cameraDriver;
	private Long cameraMux;
	private String sourceCrate;
	private Long sourceDriver;
	private Long sourceMux;

	public RImages() {
	}

	public RImages(long imageId, String imageName) {
		this.imageId = imageId;
		this.imageName = imageName;
	}

	public RImages(long imageId, String imageName, String cameraCrate,
			Long cameraDriver, Long cameraMux, String sourceCrate,
			Long sourceDriver, Long sourceMux) {
		this.imageId = imageId;
		this.imageName = imageName;
		this.cameraCrate = cameraCrate;
		this.cameraDriver = cameraDriver;
		this.cameraMux = cameraMux;
		this.sourceCrate = sourceCrate;
		this.sourceDriver = sourceDriver;
		this.sourceMux = sourceMux;
	}

	@Id
	@Column(name = "IMAGE_ID", nullable = false, precision = 10, scale = 0)
	public Long getImageId() {
		return this.imageId;
	}

	public void setImageId(long imageId) {
		this.imageId = imageId;
	}

	@Column(name = "IMAGE_NAME", unique = true, nullable = false, length = 64)
	public String getImageName() {
		return this.imageName;
	}

	public void setImageName(String imageName) {
		this.imageName = imageName;
	}

	@Column(name = "CAMERA_CRATE", length = 10)
	public String getCameraCrate() {
		return this.cameraCrate;
	}

	public void setCameraCrate(String cameraCrate) {
		this.cameraCrate = cameraCrate;
	}

	@Column(name = "CAMERA_DRIVER", precision = 10, scale = 0)
	public Long getCameraDriver() {
		return this.cameraDriver;
	}

	public void setCameraDriver(Long cameraDriver) {
		this.cameraDriver = cameraDriver;
	}

	@Column(name = "CAMERA_MUX", precision = 10, scale = 0)
	public Long getCameraMux() {
		return this.cameraMux;
	}

	public void setCameraMux(Long cameraMux) {
		this.cameraMux = cameraMux;
	}

	@Column(name = "SOURCE_CRATE", length = 10)
	public String getSourceCrate() {
		return this.sourceCrate;
	}

	public void setSourceCrate(String sourceCrate) {
		this.sourceCrate = sourceCrate;
	}

	@Column(name = "SOURCE_DRIVER", precision = 10, scale = 0)
	public Long getSourceDriver() {
		return this.sourceDriver;
	}

	public void setSourceDriver(Long sourceDriver) {
		this.sourceDriver = sourceDriver;
	}

	@Column(name = "SOURCE_MUX", precision = 10, scale = 0)
	public Long getSourceMux() {
		return this.sourceMux;
	}

	public void setSourceMux(Long sourceMux) {
		this.sourceMux = sourceMux;
	}

	/**
	 * toString().
	 */
	@Override
	public String toString() {
		MyPrinterHandler<RImages> handler = new MyPrinterHandler<RImages>(this, " ");
		try {
			handler.add(this.getClass().getDeclaredMethod("getImageId", (Class[]) null));
			handler.add(this.getClass().getDeclaredMethod("getImageName", (Class[]) null));
		} catch (SecurityException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (NoSuchMethodException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return handler.print();
	}

}
