package atlas.mdt.dcs.data;
// Generated Aug 31, 2012 4:54:30 PM by Hibernate Tools 3.4.0.CR1


import io.utils.MyPrinterHandler;

import java.math.BigDecimal;
import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;

/**
 * AlT generated by hbm2java
 */
@Entity
@Table(name="AL_T"
    ,schema="ATLAS_MDT_DCS"
)
@NamedQueries({

@NamedQuery(name = AlT.QUERY_GET_HISTORY, query = " FROM AlT as mt"
		+ " WHERE (mt.id.imageId = :id OR :id is null) AND mt.id.stime > :since AND mt.id.stime < :until") })

public class AlT  implements java.io.Serializable, EcImage {

	public static final String QUERY_GET_HISTORY = "alt.gethistory";


     private AlTId id;
     private BigDecimal cycleNumber;
     private BigDecimal temp;
     private BigDecimal TEc;
     private BigDecimal TSd;

    public AlT() {
    }

	
    public AlT(AlTId id) {
        this.id = id;
    }
    public AlT(AlTId id, BigDecimal cycleNumber, BigDecimal temp, BigDecimal TEc, BigDecimal TSd) {
       this.id = id;
       this.cycleNumber = cycleNumber;
       this.temp = temp;
       this.TEc = TEc;
       this.TSd = TSd;
    }
   
     @EmbeddedId

    
    @AttributeOverrides( {
        @AttributeOverride(name="stime", column=@Column(name="STIME", nullable=false, precision=20, scale=0) ), 
        @AttributeOverride(name="imageId", column=@Column(name="IMAGE_ID", nullable=false, precision=10, scale=0) ) } )
    public AlTId getId() {
        return this.id;
    }
    
    public void setId(AlTId id) {
        this.id = id;
    }

    
    @Column(name="CYCLE_NUMBER", precision=22, scale=0)
    public BigDecimal getCycleNumber() {
        return this.cycleNumber;
    }
    
    public void setCycleNumber(BigDecimal cycleNumber) {
        this.cycleNumber = cycleNumber;
    }

    
    @Column(name="TEMP", precision=22, scale=0)
    public BigDecimal getTemp() {
        return this.temp;
    }
    
    public void setTemp(BigDecimal temp) {
        this.temp = temp;
    }

    
    @Column(name="T_EC", precision=22, scale=0)
    public BigDecimal getTEc() {
        return this.TEc;
    }
    
    public void setTEc(BigDecimal TEc) {
        this.TEc = TEc;
    }

    
    @Column(name="T_SD", precision=22, scale=0)
    public BigDecimal getTSd() {
        return this.TSd;
    }
    
    public void setTSd(BigDecimal TSd) {
        this.TSd = TSd;
    }

	/**
	 * toString().
	 */
	@Override
	public String toString() {
		MyPrinterHandler<AlT> handler = new MyPrinterHandler<AlT>(this, " ");
		String _mobj = "none";
		try {
			handler.add(this.getClass().getDeclaredMethod("getId", (Class[]) null));
			handler.add(this.getClass().getDeclaredMethod("getCycleNumber", (Class[]) null));
			handler.add(this.getClass().getDeclaredMethod("getTemp", (Class[]) null));
			handler.add(this.getClass().getDeclaredMethod("getTEc", (Class[]) null));
			handler.add(this.getClass().getDeclaredMethod("getTSd", (Class[]) null));
			_mobj = handler.print();
		} catch (SecurityException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (NoSuchMethodException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return _mobj;
	}

	/* (non-Javadoc)
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (obj == this) {
			return true;
		}
		if (!(obj instanceof AlT)) {
			return false;
		}
		AlT idobj = (AlT) obj;

		if (!id.equals(idobj.getId())) {
			return false;
		}
		if (cycleNumber.compareTo(idobj.getCycleNumber()) != 0) {
			return false;
		}
		if (temp.compareTo(idobj.getTemp()) != 0) {
			return false;
		}
		if (TEc.compareTo(idobj.getTEc()) != 0) {
			return false;
		}
		if (TSd.compareTo(idobj.getTSd()) != 0) {
			return false;
		}
		return true;
	}
	
	@Override
	public int hashCode() {
		return id.hashCode() + cycleNumber.hashCode()+temp.hashCode()+TEc.hashCode()+TSd.hashCode();
	}

}


