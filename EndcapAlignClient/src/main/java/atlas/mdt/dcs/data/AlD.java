package atlas.mdt.dcs.data;

// Generated Aug 31, 2012 4:54:30 PM by Hibernate Tools 3.4.0.CR1

import io.utils.MyPrinterHandler;

import java.math.BigDecimal;
import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;

/**
 * AlD generated by hbm2java
 */
@Entity
@Table(name = "AL_D", schema = "ATLAS_MDT_DCS")
@NamedQueries({

		@NamedQuery(name = AlD.QUERY_GET_HISTORY, query = " FROM AlD as mt"
				+ " WHERE (mt.id.imageId = :id OR :id is null) AND mt.id.stime > :since AND mt.id.stime < :until"),
		@NamedQuery(name = AlD.QUERY_GET_CYCLE, query = " FROM AlD as mt"
				+ " WHERE (mt.cycleNumber = :cycle) order by mt.id.stime asc") })
public class AlD implements java.io.Serializable, EcImage {

	/**
	 * 
	 */
	private static final long serialVersionUID = -2471191589219986162L;
	public static final String QUERY_GET_HISTORY = "ald.gethistory";
	public static final String QUERY_GET_CYCLE = "ald.getcycle";

	private AlDId id;
	private BigDecimal cycleNumber;
	private BigDecimal DEc;
	private BigDecimal pos5v;
	private BigDecimal pos5c;
	private BigDecimal pos15v;
	private BigDecimal pos15c;
	private BigDecimal neg15v;
	private BigDecimal neg15c;

	public AlD() {
	}

	public AlD(AlDId id) {
		this.id = id;
	}

	public AlD(AlDId id, BigDecimal cycleNumber, BigDecimal DEc,
			BigDecimal pos5v, BigDecimal pos5c, BigDecimal pos15v,
			BigDecimal pos15c, BigDecimal neg15v, BigDecimal neg15c) {
		this.id = id;
		this.cycleNumber = cycleNumber;
		this.DEc = DEc;
		this.pos5v = pos5v;
		this.pos5c = pos5c;
		this.pos15v = pos15v;
		this.pos15c = pos15c;
		this.neg15v = neg15v;
		this.neg15c = neg15c;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see atlas.mdt.dcs.data.EcImage#getId()
	 */
	@Override
	@EmbeddedId
	@AttributeOverrides({
			@AttributeOverride(name = "stime", column = @Column(name = "STIME", nullable = false, precision = 20, scale = 0)),
			@AttributeOverride(name = "imageId", column = @Column(name = "IMAGE_ID", nullable = false, precision = 10, scale = 0)) })
	public AlDId getId() {
		return this.id;
	}

	public void setId(AlDId id) {
		this.id = id;
	}

	@Column(name = "CYCLE_NUMBER", precision = 22, scale = 0)
	public BigDecimal getCycleNumber() {
		return this.cycleNumber;
	}

	public void setCycleNumber(BigDecimal cycleNumber) {
		this.cycleNumber = cycleNumber;
	}

	@Column(name = "D_EC", precision = 22, scale = 0)
	public BigDecimal getDEc() {
		return this.DEc;
	}

	public void setDEc(BigDecimal DEc) {
		this.DEc = DEc;
	}

	@Column(name = "POS5V", precision = 22, scale = 0)
	public BigDecimal getPos5v() {
		return this.pos5v;
	}

	public void setPos5v(BigDecimal pos5v) {
		this.pos5v = pos5v;
	}

	@Column(name = "POS5C", precision = 22, scale = 0)
	public BigDecimal getPos5c() {
		return this.pos5c;
	}

	public void setPos5c(BigDecimal pos5c) {
		this.pos5c = pos5c;
	}

	@Column(name = "POS15V", precision = 22, scale = 0)
	public BigDecimal getPos15v() {
		return this.pos15v;
	}

	public void setPos15v(BigDecimal pos15v) {
		this.pos15v = pos15v;
	}

	@Column(name = "POS15C", precision = 22, scale = 0)
	public BigDecimal getPos15c() {
		return this.pos15c;
	}

	public void setPos15c(BigDecimal pos15c) {
		this.pos15c = pos15c;
	}

	@Column(name = "NEG15V", precision = 22, scale = 0)
	public BigDecimal getNeg15v() {
		return this.neg15v;
	}

	public void setNeg15v(BigDecimal neg15v) {
		this.neg15v = neg15v;
	}

	@Column(name = "NEG15C", precision = 22, scale = 0)
	public BigDecimal getNeg15c() {
		return this.neg15c;
	}

	public void setNeg15c(BigDecimal neg15c) {
		this.neg15c = neg15c;
	}

	/**
	 * toString().
	 */
	@Override
	public String toString() {
		MyPrinterHandler<AlD> handler = new MyPrinterHandler<AlD>(this, " ");
		String _mobj = "none";
		try {
			handler.add(this.getClass().getDeclaredMethod("getId",
					(Class[]) null));
			handler.add(this.getClass().getDeclaredMethod("getCycleNumber",
					(Class[]) null));
			handler.add(this.getClass().getDeclaredMethod("getDEc",
					(Class[]) null));
			handler.add(this.getClass().getDeclaredMethod("getPos5v",
					(Class[]) null));
			handler.add(this.getClass().getDeclaredMethod("getPos5c",
					(Class[]) null));
			handler.add(this.getClass().getDeclaredMethod("getPos15v",
					(Class[]) null));
			handler.add(this.getClass().getDeclaredMethod("getPos15c",
					(Class[]) null));
			handler.add(this.getClass().getDeclaredMethod("getNeg15v",
					(Class[]) null));
			handler.add(this.getClass().getDeclaredMethod("getNeg15c",
					(Class[]) null));

			_mobj = handler.print();
		} catch (SecurityException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (NoSuchMethodException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return _mobj;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (obj == this) {
			return true;
		}
		if (!(obj instanceof AlD)) {
			return false;
		}
		AlD idobj = (AlD) obj;

		if (!id.equals(idobj.getId())) {
			return false;
		}
		if (cycleNumber.compareTo(idobj.getCycleNumber()) != 0) {
			return false;
		}
		if (DEc.compareTo(idobj.getDEc()) != 0) {
			return false;
		}
		if (pos5v.compareTo(idobj.getPos5v()) != 0) {
			return false;
		}
		if (pos15v.compareTo(idobj.getPos15v()) != 0) {
			return false;
		}
		return true;
	}

	@Override
	public int hashCode() {
		return id.hashCode() + cycleNumber.hashCode() + DEc.hashCode()
				+ pos5v.hashCode() + pos15v.hashCode();
	}

}
